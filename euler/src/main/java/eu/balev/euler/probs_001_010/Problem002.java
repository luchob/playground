package eu.balev.euler.probs_001_010;

import java.util.function.IntSupplier;
import java.util.function.LongSupplier;

/**
 * <a href="https://projecteuler.net">https://projecteuler.net/problem=2</a>.
 */
public class Problem002 implements LongSupplier {

	// Each new term in the Fibonacci sequence is generated by adding the
	// previous two terms.
	// By starting with 1 and 2, the first 10 terms will be:

	// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	// By considering the terms in the Fibonacci sequence whose values do not
	// exceed four million,
	// find the sum of the even-valued terms.

	@Override
	public long getAsLong() {

		IntSupplier evenNumSupplier = new EvenNumberSupplier(
				new FibonacciSupplier());

		int sum = 0;

		while ((sum += evenNumSupplier.getAsInt()) < 4_000_000)
			;

		return sum;
	}

	private static class EvenNumberSupplier implements IntSupplier {

		// Note:
		// Every third numner in Fibonacci sequence is even.
		// Why: e - even, o - odd:
		// o + o = e
		// e + o = o
		//
		// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		// o, e, o, o, e, o, o, e, o, o, ...

		private final IntSupplier delegate;

		EvenNumberSupplier(IntSupplier delegate) {
			this.delegate = delegate;
		}

		@Override
		public int getAsInt() {
			int ret = 0;
			while ((ret = delegate.getAsInt()) % 2 != 0)
				;
			return ret;
		}
	}

	private static class FibonacciSupplier implements IntSupplier {
		private int prev = 0, current = 1;

		@Override
		public int getAsInt() {
			return current = Math.addExact(prev, prev = current);
		}

	}
}
